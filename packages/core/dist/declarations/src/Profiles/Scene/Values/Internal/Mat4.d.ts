import { Mat3 } from "./Mat3.js";
import { Vec2 } from "./Vec2.js";
import { Vec3 } from "./Vec3.js";
import { Vec4 } from "./Vec4.js";
export type Mat4JSON = number[];
export declare class Mat4 {
    elements: number[];
    constructor(elements?: number[]);
    clone(result?: Mat4): Mat4;
    set(elements: number[]): this;
}
export declare function mat4SetColumn4(m: Mat4, columnIndex: bigint, column: Vec4, result?: Mat4): Mat4;
export declare function mat4SetRow4(m: Mat4, rowIndex: bigint, row: Vec4, result?: Mat4): Mat4;
export declare function column4ToMat4(a: Vec4, b: Vec4, c: Vec4, d: Vec4, result?: Mat4): Mat4;
export declare function mat4Equals(a: Mat4, b: Mat4, tolerance?: number): boolean;
export declare function mat4Add(a: Mat4, b: Mat4, result?: Mat4): Mat4;
export declare function mat4Subtract(a: Mat4, b: Mat4, result?: Mat4): Mat4;
export declare function mat4MultiplyByScalar(a: Mat4, b: number, result?: Mat4): Mat4;
export declare function mat4Negate(a: Mat4, result?: Mat4): Mat4;
export declare function mat4Multiply(a: Mat4, b: Mat4, result?: Mat4): Mat4;
export declare function mat4Determinant(m: Mat4): number;
export declare function mat4Adjoint(m: Mat4, result?: Mat4): Mat4;
export declare function mat4Transpose(m: Mat4, result?: Mat4): Mat4;
export declare function mat4Inverse(m: Mat4, result?: Mat4): Mat4;
export declare function mat4Mix(a: Mat4, b: Mat4, t: number, result?: Mat4): Mat4;
export declare function mat4FromArray(array: Float32Array | number[], offset?: number, result?: Mat4): Mat4;
export declare function mat4ToArray(a: Mat4, array: Float32Array | number[], offset?: number): void;
export declare function mat4ToString(a: Mat4): string;
export declare function mat4Parse(text: string, result?: Mat4): Mat4;
export declare function mat3ToMat4(a: Mat3, result?: Mat4): Mat4;
export declare function eulerToMat4(e: Vec3, result?: Mat4): Mat4;
export declare function quatToMat4(q: Vec4, result?: Mat4): Mat4;
export declare function scale3ToMat4(s: Vec3, result?: Mat4): Mat4;
export declare function mat4ToScale3(m: Mat4, result?: Vec3): Vec3;
export declare function translation3ToMat4(t: Vec3, result?: Mat4): Mat4;
export declare function mat4ToTranslation3(m: Mat4, result?: Vec3): Vec3;
export declare function mat4Translate(m: Mat4, t: Vec3, result?: Mat4): Mat4;
export declare function mat4Scale(m: Mat4, s: Vec3, result?: Mat4): Mat4;
export declare function mat4RotateByQuat(m: Mat4, q: Vec4, result?: Mat4): Mat4;
export declare function mat4RotateByEuler(m: Mat4, e: Vec3, result?: Mat4): Mat4;
export declare function mat4TransformPoint3(m: Mat4, v: Vec4, result?: Vec3): Vec3;
export declare function mat4TransformNormal3(v: Vec3, m: Mat4, result?: Vec3): Vec3;
export declare function mat4Perspective(left: number, right: number, top: number, bottom: number, near: number, far: number, result?: Mat4): Mat4;
export declare function mat4PerspectiveFov(verticalFov: number, near: number, far: number, zoom: number, aspectRatio: number, result?: Mat4): Mat4;
export declare function mat4Orthogonal(left: number, right: number, top: number, bottom: number, near: number, far: number, result?: Mat4): Mat4;
export declare function mat4OrthogonalSimple(height: number, center: Vec2, near: number, far: number, zoom: number, aspectRatio?: number, result?: Mat4): Mat4;
export declare function mat4LookAt(eye: Vec3, target: Vec3, up: Vec3, result?: Mat4): Mat4;
