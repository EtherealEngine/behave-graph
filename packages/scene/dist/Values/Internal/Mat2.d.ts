import { Mat3 } from './Mat3.js';
import { Mat4 } from './Mat4.js';
import { Vec2 } from './Vec2.js';
export type Mat2JSON = number[];
export declare class Mat2 {
    elements: number[];
    constructor(elements?: number[]);
    clone(result?: Mat2): Mat2;
    set(elements: number[]): this;
}
export declare function mat2SetColumn3(m: Mat2, columnIndex: number, column: Vec2, result?: Mat2): Mat2;
export declare function mat2SetRow3(m: Mat2, rowIndex: number, row: Vec2, result?: Mat2): Mat2;
export declare function column3ToMat2(a: Vec2, b: Vec2, c: Vec2, result?: Mat2): Mat2;
export declare function mat2Equals(a: Mat2, b: Mat2, tolerance?: number): boolean;
export declare function mat2Add(a: Mat2, b: Mat2, result?: Mat2): Mat2;
export declare function mat2Subtract(a: Mat2, b: Mat2, result?: Mat2): Mat2;
export declare function mat2MultiplyByScalar(a: Mat2, b: number, result?: Mat2): Mat2;
export declare function mat2Negate(a: Mat2, result?: Mat2): Mat2;
export declare function mat2Multiply(a: Mat2, b: Mat2, result?: Mat2): Mat2;
export declare function mat2Determinant(m: Mat2): number;
export declare function mat2Transpose(m: Mat2, result?: Mat2): Mat2;
export declare function mat2Inverse(m: Mat2, result?: Mat2): Mat2;
export declare function mat2Mix(a: Mat2, b: Mat2, t: number, result?: Mat2): Mat2;
export declare function mat2FromArray(array: Float32Array | number[], offset?: number, result?: Mat2): Mat2;
export declare function mat2ToArray(a: Mat2, array: Float32Array | number[], offset?: number): void;
export declare function mat2ToString(a: Mat2): string;
export declare function mat2Parse(text: string, result?: Mat2): Mat2;
export declare function scale2ToMat2(s: Vec2, result?: Mat2): Mat2;
export declare function mat2ToScale2(m: Mat4, result?: Vec2): Vec2;
export declare function mat3ToMat2(a: Mat3, result?: Mat2): Mat2;
